/*
 ============================================================================
 Name        : TP1.c
 Author      : Escobar Juan Ignacio
 Version     :
 Copyright   : DIVISION F
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <time.h>

#include "funcionesImpresionPorPantallaTP1"
#include "funcionesCalculosTP1"


#define BTC 4749852.74

void mostrarMenuInicial(float, float, float);
int recibirOpcionMenuPrincipal(float, float, float);
int validarOpcionMenuPrincipal(int, float, float, float);
float cargarKilometros(void);
float validarKilometros(float);
void mostrarSubmenuAereolineas(void);
int recibirOpcionSubmenu(void);
float cargarPrecio(void);
float validarPrecio(float);
float calcularPrecioTD(float);
float calcularPrecioTC(float);
float calcularPrecioBTC(float);
void noRealizarCalculos(void);
void noMostrarCalculos(void);
float calcularPrecioUnitario(float,float);
float diferenciaPrecio(float,float);
void limpiarPantalla(void);
int confirmacionSalida(void);
int validaropcionSubmenu(int);
int validaropcionSalida(int);
void delay(int);
void calcularTodosLosCostos();

int main()
{
	setbuf(stdout,NULL);

    int opcion;
    int opcionSubmenu;

    float km=0;
    float precioAA = 0;
    float precioLatam = 0;

    //costos AA
    float precioTdAA=0;
    float precioTcAA=0;
    float precioBtcAA=0;
    float precioAAUnitario=0;

    //costos LATAM
    float precioTdLatam=0;
    float precioTcLatam=0;
    float precioBtcLatam=0;
    float precioLatamUnitario=0;

    float precioDiferencia=0;

    int continuar = 1;

    do{

        mostrarMenuInicial(km, precioAA, precioLatam);
        opcion = recibirOpcionMenuPrincipal(km, precioAA, precioLatam);
        limpiarPantalla();

        switch(opcion){
            case 1:
                km = cargarKilometros();
                break;
            case 2:
                mostrarSubmenuAereolineas();
                opcionSubmenu = recibirOpcionSubmenu();
                if(opcionSubmenu==1){
                    precioAA = cargarPrecio();
                }else{
                    precioLatam = cargarPrecio();
                }
                break;
            case 3:
                if(km>0 && precioAA>0 && precioLatam>0){
                    precioTdAA = calcularPrecioTD(precioAA);
                    precioTdLatam = calcularPrecioTD(precioLatam);

                    precioTcAA = calcularPrecioTC(precioAA);
                    precioTcLatam = calcularPrecioTC(precioLatam);

                    precioBtcAA = calcularPrecioBTC(precioAA);
                    precioBtcLatam = calcularPrecioBTC(precioLatam);

                    precioAAUnitario = calcularPrecioUnitario(precioAA, km);
                    precioLatamUnitario = calcularPrecioUnitario(precioLatam, km);

                    precioDiferencia = diferenciaPrecio(precioAA,precioLatam);

                    calcularTodosLosCostos();

                }else{
                    noRealizarCalculos();
                }
                break;
            case 4:
                if(precioAAUnitario>0){
                    printf("\nLatam:\n");
                    printf("\na) Precio con tarjeta de débito: %.2f", precioTdLatam);
                    printf("\nb) Precio con tarjeta de crédito: %.2f", precioTcLatam);
                    printf("\nc) Precio pagando con bitcoin : %f", precioBtcLatam);
                    printf("\nd) Precio unitario: %.2f", precioLatamUnitario);
                    printf("\n\nAerolíneas:\n");
                    printf("\na) Precio con tarjeta de débito: %.2f", precioTdAA);
                    printf("\nb) Precio con tarjeta de crédito: %.2f", precioTcAA);
                    printf("\nc) Precio pagando con bitcoin : %f", precioBtcAA);
                    printf("\nd) Precio unitario: %.2f", precioAAUnitario);
                    printf("\n\nLa diferencia de precio es : %.2f", precioDiferencia);
                    printf("\n\n\n\n");
                }else{
                    noMostrarCalculos();
                }
                break;
            case 5:
                km = 7090;
                precioLatam = 162965;
                precioAA = 159339;

                precioTdAA = calcularPrecioTD(precioAA);
				precioTdLatam = calcularPrecioTD(precioLatam);

				precioTcAA = calcularPrecioTC(precioAA);
				precioTcLatam = calcularPrecioTC(precioLatam);

				precioBtcAA = calcularPrecioBTC(precioAA);
				precioBtcLatam = calcularPrecioBTC(precioLatam);

				precioAAUnitario = calcularPrecioUnitario(precioAA, km);
				precioLatamUnitario = calcularPrecioUnitario(precioLatam, km);

				precioDiferencia = diferenciaPrecio(precioAA,precioLatam);

                break;
            case 6:
                continuar = confirmacionSalida();
                break;
        }

    }while(continuar);

    return 0;
}

void mostrarMenuInicial(float km, float precioAA, float precioLatam){
    printf("1- Ingresar KM. ( KM = %2.f )\n", km);
	printf("2- Ingresar valor del vuelo. (Aerolíneas = $ %2.f, Latam = $ %2.f)\n", precioAA, precioLatam);
	printf("3- Calcular costos. \n");
	printf("4- Mostrar datos de facturacion. \n");
	printf("5- Carga Manual de Datos. \n");
	printf("6- Salir. \n");
    printf("\n\nSELECCIONA LA OPCION: \n\n");

}

int recibirOpcionMenuPrincipal(float km, float precioAA, float precioLatam){
    int opcion;
    scanf("%d", &opcion);
    opcion = validarOpcionMenuPrincipal(opcion, km, precioAA, precioLatam);

    return opcion;
}

int validarOpcionMenuPrincipal(int opcion, float km, float precioAA, float precioLatam){
    while(opcion<1 || opcion>6){
        printf("\n\nError en dato\n\n");
        mostrarMenuInicial( km,  precioAA,  precioLatam);
        opcion = recibirOpcionMenuPrincipal(km,  precioAA,  precioLatam);
    }
    return opcion;
}

float cargarKilometros(){
    float km;
    printf("\nIngrese los Kilometros del viaje: ");
    scanf("%f", &km);
    km = validarKilometros(km);
    limpiarPantalla();
    return km;
}

float validarKilometros(float km){
    while(km<1){
        limpiarPantalla();
        printf("\n\nERROR EN DATO. REINGRESE.\n\n");
        km = cargarKilometros();
    }

    return km;
}

void mostrarSubmenuAereolineas(){
    printf("1- Aereolineas Argentinas. \n");
	printf("2- LATAM. \n");
}

int recibirOpcionSubmenu(){
    int opcion;
    printf("\nIngrese la opcion deseada: ");
    scanf("%d",&opcion);
    limpiarPantalla();
    opcion = validaropcionSubmenu(opcion);

    return opcion;
}

int validaropcionSubmenu(int opcion){
    while(opcion<1 || opcion>2){
        printf("\n\nError en dato\n\n");
        mostrarSubmenuAereolineas();
        opcion = recibirOpcionSubmenu();
    }
    return opcion;
}

float cargarPrecio(){
    float precio;
    printf("\nIngrese el precio del Kilometros: ");
    scanf("%f",&precio);
    precio = validarPrecio(precio);
    limpiarPantalla();
    return precio;
}

float validarPrecio(float precio){
    while(precio<1){
        limpiarPantalla();
        printf("\n\nERROR EN DATO. REINGRESE.\n\n");
        precio = cargarPrecio();
    }

    return precio;
}

float calcularPrecioTD(float precio){
    precio = precio*0.9;

    return precio;
}

float calcularPrecioTC(float precio){
    precio = precio*1.25;

    return precio;
}

void noRealizarCalculos(){
    printf("\nFaltan cargar datos. Verifique Kilometraje y precios de Aereolineas\n\n\n");
}

void noMostrarCalculos(){
    printf("\nFaltan calcular datos. Verifique haber calculado previamente\n\n\n");
}

float calcularPrecioBTC(float precio){
    precio = precio/BTC;

    return precio;
}

float calcularPrecioUnitario(float precio, float km){
    precio = precio/km;

    return precio;
}

float diferenciaPrecio(float precioAA, float precioLatam){
    float diferencia;
    if(precioAA>precioLatam){
        diferencia = precioAA - precioLatam;
    }else{
        diferencia = precioLatam - precioAA;
    }

    return diferencia;
}

int confirmacionSalida(){
    int continuar;
    printf("\nRealmente Desea Salir. \n\n0- SI \n1- NO\n\n");
    scanf("%d", &continuar);
    continuar = validaropcionSalida(continuar);
    limpiarPantalla();
    return continuar;
}

int validaropcionSalida(int opcion){
    while(opcion<0 || opcion>1){
        printf("\n\nError en dato\n\n");
        opcion = confirmacionSalida();
    }

    return opcion;
}

void limpiarPantalla(){
        printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
}

void delay(int secs) {
  for(int i = (time(NULL) + secs); time(NULL) != i; time(NULL));
}

void calcularTodosLosCostos(){
    printf("\n\nCAlCULANDO COSTOS.... ESPERE...\n");
    delay(1);
    printf("3...\n");
    delay(2);
    printf("2...\n");
    delay(2);
    printf("1...\n");
    delay(1);
    printf("...TODO OK...\n");
    delay(1);
    limpiarPantalla();
}
